I"^z<p>私は<a href="https://jekyllrb.com/">Jekyll</a>のファンです。
<a href="https://pages.github.com/">GitHub Pages</a>と組み合わせると、大量のトラフィックを処理できる無料のブログを得られます。
すごい。最高。<br />
There’s just this one thing.
ただ一つ。
Jekyll handles <a href="http://sass-lang.com/">Sass</a> out of the box and supports <a href="http://coffeescript.org/">CoffeeScript</a> with a gem but I demand more.
I want Sass, file concatentation, minification, automatic prefixing of CSS, live reloading, and dancing unicorns!
Ok, that last one might not be available.
For the rest… enter <a href="http://gulpjs.com/">Gulp</a>.</p>

<!--more-->

<h3 id="the-more-you-know">The More You Know</h3>

<p>I assume you’re familiar with Jekyll.
If you’re not, go read up on that and come back.
I’ll be here.</p>

<p>If you’ve used Gulp, give yourself a high five and move to the next section.</p>

<p>Still here?
Grab your helmet and buckle up for a crash course in Gulp.</p>

<p>At its core Gulp can run tasks and watch files.
It also provides a handy way to source files, transform them, and write them out within a single task.
If you’ve worked with Ruby on Rails, it’s like rake, guard, and the asset pipeline had a baby.</p>

<p>To install Gulp, the first thing you’ll need is <a href="https://nodejs.org/en/">Node</a>.</p>

<p>Once you have Node installed run this:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>npm init
</code></pre></div></div>

<p>You’ll be prompted with a few questions.
The answers are used to write out a file called <code class="highlighter-rouge">package.json</code>.
Don’t be too worried about messing up.
You can always change the file later.</p>

<p>The <code class="highlighter-rouge">package.json</code> file is a description of your project and its dependencies.
Go ahead and add Gulp as your first dependency.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>npm <span class="nb">install</span> <span class="nt">--global</span> gulp
<span class="nv">$ </span>npm <span class="nb">install</span> <span class="nt">--save-dev</span> gulp
</code></pre></div></div>

<p>The first install makes <code class="highlighter-rouge">gulp</code> available as a system wide command.
The second saves it to the local <code class="highlighter-rouge">node_modules</code> directory and adds it to your <code class="highlighter-rouge">package.json</code>.</p>

<p>Gulp expects to find a <code class="highlighter-rouge">gulpfile.js</code> when run.
That file contains all of the tasks you want to be able to run.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// gulpfile.js</span>

<span class="kd">const</span> <span class="nx">gulp</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">gulp</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">function</span> <span class="nx">magicUpperCaseConvert</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// ...</span>
<span class="p">};</span>

<span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="dl">'</span><span class="s1">upper</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="dl">'</span><span class="s1">*.txt</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">magicUpperCaseConvert</span><span class="p">())</span>
    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="dl">'</span><span class="s1">upper_files</span><span class="dl">'</span><span class="p">));</span>
<span class="p">});</span>

<span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="dl">'</span><span class="s1">watch</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">gulp</span><span class="p">.</span><span class="nx">watch</span><span class="p">(</span><span class="dl">'</span><span class="s1">*.txt</span><span class="dl">'</span><span class="p">,</span> <span class="p">[</span><span class="dl">'</span><span class="s1">upper</span><span class="dl">'</span><span class="p">]);</span>
<span class="p">});</span>

<span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="dl">'</span><span class="s1">default</span><span class="dl">'</span><span class="p">,</span> <span class="p">[</span><span class="dl">'</span><span class="s1">watch</span><span class="dl">'</span><span class="p">]);</span>
</code></pre></div></div>

<p>Let’s break down the “upper” task.
It starts by getting all text files from the current directory via <code class="highlighter-rouge">gulp.src</code>.
Each file is piped through our <code class="highlighter-rouge">magicUpperCaseConvert</code> function.
Then the file is written to the “upper_files” directory via <code class="highlighter-rouge">gulp.dest</code>.
All this can be done from the command line by calling <code class="highlighter-rouge">gulp upper</code>.</p>

<p>The “watch” task uses <code class="highlighter-rouge">gulp.watch</code> to keep an eye on those same text files.
Any file changes will cause it to call the “upper” task.
You’ll notice that “upper” is part of an array.
More than one task can be executed.</p>

<p>At the end there’s a “default” task.
Calling <code class="highlighter-rouge">gulp</code> without specifying a task results in a call to the “default” task.
Similar to <code class="highlighter-rouge">gulp.watch</code>, this can also take an array of tasks.</p>

<p>That’s it.
The course is complete.
You’ll receive a certificate in 8-12 weeks.</p>

<h3 id="a-friendly-reminder">A Friendly Reminder</h3>

<p>By the time you’re done your project will include <code class="highlighter-rouge">package.json</code>, <code class="highlighter-rouge">gulpfile.js</code>, and a <code class="highlighter-rouge">node_modules</code> directory.
You don’t want these served up with your actual site.
Take a moment and add them to your <code class="highlighter-rouge">_config.yml</code> as build exclusions.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">exclude</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">package.json</span>
  <span class="pi">-</span> <span class="s">node_modules</span>
  <span class="pi">-</span> <span class="s">gulpfile.js</span>
</code></pre></div></div>

<p>On to the Gulping!</p>

<h3 id="concatenation">Concatenation</h3>

<p>I like to keep my hand crafted CSS in a folder called “_css”.
The processed assets that end up on the site go in a folder called “assets”.
Use whatever structure works for you.
This guide uses my setup.</p>

<p>You’ll start by joining all of the files in “_css” and adding the new file to “assets”.
For the concatentation you’ll use a library called <code class="highlighter-rouge">gulp-concat</code>.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>npm <span class="nb">install</span> <span class="nt">--save-dev</span> gulp-concat
</code></pre></div></div>

<p>Start off your <code class="highlighter-rouge">gulpfile.js</code> with the code below.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">gulp</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">gulp</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">concat</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">gulp-concat</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">cssFiles</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">_css/**/*.css</span><span class="dl">'</span><span class="p">;</span>

<span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="dl">'</span><span class="s1">css</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="nx">cssFiles</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">concat</span><span class="p">(</span><span class="dl">'</span><span class="s1">all.css</span><span class="dl">'</span><span class="p">))</span>
    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="dl">'</span><span class="s1">assets</span><span class="dl">'</span><span class="p">))</span>
<span class="p">});</span>

<span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="dl">'</span><span class="s1">watch</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">gulp</span><span class="p">.</span><span class="nx">watch</span><span class="p">(</span><span class="nx">cssFiles</span><span class="p">,</span> <span class="p">[</span><span class="dl">'</span><span class="s1">css</span><span class="dl">'</span><span class="p">]);</span>
<span class="p">});</span>

<span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="dl">'</span><span class="s1">default</span><span class="dl">'</span><span class="p">,</span> <span class="p">[</span><span class="dl">'</span><span class="s1">css</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">watch</span><span class="dl">'</span><span class="p">]);</span>
</code></pre></div></div>

<p>Running <code class="highlighter-rouge">gulp css</code> will generate a file with all of your CSS called “assets/all.css”.
You can also run <code class="highlighter-rouge">gulp watch</code> and it will continuously regenerate the file as you make changes.</p>

<p>Not bad for 12 lines of code.</p>

<h3 id="sass">Sass</h3>

<p>Jekyll supports Sass and I like using it.
Adding Sass to the existing code requires little effort.</p>

<p>Go ahead and install <code class="highlighter-rouge">gulp-sass</code>.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>npm <span class="nb">install</span> <span class="nt">--save-dev</span> gulp-sass
</code></pre></div></div>

<p>First, update the files being watched to include “scss”.
Then pipe the files through the Sass transform.</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code> const gulp = require('gulp');
 const concat = require('gulp-concat');
<span class="gi">+const sass = require('gulp-sass');
</span>
-const cssFiles = '_css/**/*.css';
<span class="gi">+const cssFiles = '_css/**/*.?(s)css';
</span>
 gulp.task('css', () =&gt; {
   gulp.src(cssFiles)
<span class="gi">+    .pipe(sass())
</span>     .pipe(concat('all.css'))
     .pipe(gulp.dest('assets'));
 });

 gulp.task('watch', () =&gt; {
   gulp.watch(cssFiles, ['css']);
 });

 gulp.task('default', ['css', 'watch']);
</code></pre></div></div>

<p>Congratulations, your blog supports Sass files.
You can follow this basic process to add other transforms like automatic vender prefixing and minification.</p>

<h3 id="running-jekyll-via-gulp">Running Jekyll via Gulp</h3>

<p>As it stands you’re going to have to run Jekyll and Gulp to have a functioning site.
It would be nice if we could get that back to one command.
The good news is we can!
We’re going to run Jekyll in a child process.</p>

<p>To accomplish this you’ll use the <code class="highlighter-rouge">child_process</code> library that comes with Node.
You’ll also want <code class="highlighter-rouge">gulp-util</code>.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>npm <span class="nb">install</span> <span class="nt">--save-dev</span> gulp-util
</code></pre></div></div>

<p>When Jekyll prints output we want to show it.
Using <code class="highlighter-rouge">gulp-util</code> makes it look like all the other entries in the log.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>23:23:25] Jekyll: Configuration file: /Users/aaron/blog/_config.yml
<span class="o">[</span>23:23:25] Jekyll:
<span class="o">[</span>23:23:25] Jekyll:             Source: /Users/aaron/blog
<span class="o">[</span>23:23:25] Jekyll:        Destination: /Users/aaron/blog/_site
<span class="o">[</span>23:23:25] Jekyll:  Incremental build: enabled
<span class="o">[</span>23:23:25] Jekyll:
<span class="o">[</span>23:23:25] Jekyll:       Generating...
<span class="o">[</span>23:23:25] Jekyll:
<span class="o">[</span>23:23:27] Jekyll:                     <span class="k">done in </span>2.734 seconds.
</code></pre></div></div>

<p>You’ll need to launch <code class="highlighter-rouge">jekyll serve --watch --incremental --drafts</code> as a child process.
Then capture the output buffer, clean it up, and log it.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">child</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">child_process</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">gutil</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">gulp-util</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="dl">'</span><span class="s1">jekyll</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">jekyll</span> <span class="o">=</span> <span class="nx">child</span><span class="p">.</span><span class="nx">spawn</span><span class="p">(</span><span class="dl">'</span><span class="s1">jekyll</span><span class="dl">'</span><span class="p">,</span> <span class="p">[</span><span class="dl">'</span><span class="s1">serve</span><span class="dl">'</span><span class="p">,</span>
    <span class="dl">'</span><span class="s1">--watch</span><span class="dl">'</span><span class="p">,</span>
    <span class="dl">'</span><span class="s1">--incremental</span><span class="dl">'</span><span class="p">,</span>
    <span class="dl">'</span><span class="s1">--drafts</span><span class="dl">'</span>
  <span class="p">]);</span>

  <span class="kd">const</span> <span class="nx">jekyllLogger</span> <span class="o">=</span> <span class="p">(</span><span class="nx">buffer</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">buffer</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span>
      <span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="sr">/</span><span class="se">\n</span><span class="sr">/</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">forEach</span><span class="p">((</span><span class="nx">message</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">gutil</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Jekyll: </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">message</span><span class="p">));</span>
  <span class="p">};</span>

  <span class="nx">jekyll</span><span class="p">.</span><span class="nx">stdout</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">data</span><span class="dl">'</span><span class="p">,</span> <span class="nx">jekyllLogger</span><span class="p">);</span>
  <span class="nx">jekyll</span><span class="p">.</span><span class="nx">stderr</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">data</span><span class="dl">'</span><span class="p">,</span> <span class="nx">jekyllLogger</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>

<p>Add this new task to your “default” task.</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gd">- gulp.task('default', ['css', 'watch']);
</span><span class="gi">+ gulp.task('default', ['css', 'jekyll', 'watch']);
</span></code></pre></div></div>

<p>Hit the command line, type <code class="highlighter-rouge">gulp</code>, lean back, and enjoy.
Initially this might look like a mere convenience.
On the contrary, we’re now ready for the next big step.</p>

<h3 id="live-reloading">Live Reloading</h3>

<p>Gone are the days of making a change to your blog and manually refreshing your browser.
These are the days of the live reload.
Every change will cause your browser to automatically reload the page.</p>

<p>There are several packages that you can install to achieve a live reload.
We’ll do it with one called <code class="highlighter-rouge">browser-sync</code>.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>npm <span class="nb">install</span> <span class="nt">--save-dev</span> browser-sync
</code></pre></div></div>

<p><a href="https://www.browsersync.io/">Browsersync</a> does more than just reload your pages.
It also syncs up all browsers viewing the page.
If you open your site in Firefox and in Chrome and then scroll in one, the other will scroll too.
You could open it in Safari on a Mac, Edge on a Windows PC, and in Firefox on your Android phone and scroll them all.
It’ll copy clicks, submit forms, and generally do its best to keep everything in line.</p>

<p>In order to use all of Browsersync you need to let it run the show.
This means Jekyll will build content instead of serving it.</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gd">- const jekyll = child.spawn('jekyll', ['serve',
</span><span class="gi">+ const jekyll = child.spawn('jekyll', ['build',
</span></code></pre></div></div>

<p>Leave it to Browsersync to serve up the files.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">browserSync</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">browser-sync</span><span class="dl">'</span><span class="p">).</span><span class="nx">create</span><span class="p">();</span>

<span class="kd">const</span> <span class="nx">siteRoot</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">_site</span><span class="dl">'</span><span class="p">;</span>

<span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="dl">'</span><span class="s1">serve</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">browserSync</span><span class="p">.</span><span class="nx">init</span><span class="p">({</span>
    <span class="na">files</span><span class="p">:</span> <span class="p">[</span><span class="nx">siteRoot</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">/**</span><span class="dl">'</span><span class="p">],</span>
    <span class="na">port</span><span class="p">:</span> <span class="mi">4000</span><span class="p">,</span>
    <span class="na">server</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">baseDir</span><span class="p">:</span> <span class="nx">siteRoot</span>
    <span class="p">}</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>

<p>I’ve set the port to <code class="highlighter-rouge">4000</code> for parity with Jekyll but you don’t have to.
The <code class="highlighter-rouge">files</code> line is crutial because it spells out which files to watch for changes.</p>

<p>At this point the “watch” task doesn’t serve much purpose by itself.
You might as well join it into “serve”.</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code> gulp.task('serve', () =&gt; {
   browserSync.init({
     files: [siteRoot + '/**'],
     port: 4000,
     server: {
       baseDir: siteRoot
     }
   });
<span class="gi">+
+  gulp.watch(cssFiles, ['css']);
</span> });

-gulp.task('watch', () =&gt; {
<span class="gd">-  gulp.watch(cssFiles, ['css']);
-});
</span></code></pre></div></div>

<p>Replace “watch” with “serve” and you’re all set.</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gd">- gulp.task('default', ['css', 'jekyll', 'watch']);
</span><span class="gi">+ gulp.task('default', ['css', 'jekyll', 'serve']);
</span></code></pre></div></div>

<p>At this point you there should be fireworks, a choir of angels singing, and you should have a sense of complete tranquility.</p>

<h3 id="everything-else">Everything Else</h3>

<p>You’re up and running but you don’t have to stop here.
For minification take a look at <code class="highlighter-rouge">gulp-cssnano</code>.
If you’re using something like flexbox where vendor prefixes can help a lot consider <code class="highlighter-rouge">gulp-autoprefixer</code>.
Maybe your site has JavaScript (or some flavor of it) and you want to handle that too.
The steps are largely the same.
From here the sky’s your oyster and the world’s the limit.
Well, something like that.</p>

<p>Final <code class="highlighter-rouge">gulpfile.js</code>:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">child</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">child_process</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">browserSync</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">browser-sync</span><span class="dl">'</span><span class="p">).</span><span class="nx">create</span><span class="p">();</span>

<span class="kd">const</span> <span class="nx">gulp</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">gulp</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">concat</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">gulp-concat</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">gutil</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">gulp-util</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">sass</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">gulp-sass</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">siteRoot</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">_site</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">cssFiles</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">_css/**/*.?(s)css</span><span class="dl">'</span><span class="p">;</span>

<span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="dl">'</span><span class="s1">css</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="nx">cssFiles</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">sass</span><span class="p">())</span>
    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">concat</span><span class="p">(</span><span class="dl">'</span><span class="s1">all.css</span><span class="dl">'</span><span class="p">))</span>
    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="dl">'</span><span class="s1">assets</span><span class="dl">'</span><span class="p">));</span>
<span class="p">});</span>

<span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="dl">'</span><span class="s1">jekyll</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">jekyll</span> <span class="o">=</span> <span class="nx">child</span><span class="p">.</span><span class="nx">spawn</span><span class="p">(</span><span class="dl">'</span><span class="s1">jekyll</span><span class="dl">'</span><span class="p">,</span> <span class="p">[</span><span class="dl">'</span><span class="s1">build</span><span class="dl">'</span><span class="p">,</span>
    <span class="dl">'</span><span class="s1">--watch</span><span class="dl">'</span><span class="p">,</span>
    <span class="dl">'</span><span class="s1">--incremental</span><span class="dl">'</span><span class="p">,</span>
    <span class="dl">'</span><span class="s1">--drafts</span><span class="dl">'</span>
  <span class="p">]);</span>

  <span class="kd">const</span> <span class="nx">jekyllLogger</span> <span class="o">=</span> <span class="p">(</span><span class="nx">buffer</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">buffer</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span>
      <span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="sr">/</span><span class="se">\n</span><span class="sr">/</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">forEach</span><span class="p">((</span><span class="nx">message</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">gutil</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Jekyll: </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">message</span><span class="p">));</span>
  <span class="p">};</span>

  <span class="nx">jekyll</span><span class="p">.</span><span class="nx">stdout</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">data</span><span class="dl">'</span><span class="p">,</span> <span class="nx">jekyllLogger</span><span class="p">);</span>
  <span class="nx">jekyll</span><span class="p">.</span><span class="nx">stderr</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">data</span><span class="dl">'</span><span class="p">,</span> <span class="nx">jekyllLogger</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="dl">'</span><span class="s1">serve</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">browserSync</span><span class="p">.</span><span class="nx">init</span><span class="p">({</span>
    <span class="na">files</span><span class="p">:</span> <span class="p">[</span><span class="nx">siteRoot</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">/**</span><span class="dl">'</span><span class="p">],</span>
    <span class="na">port</span><span class="p">:</span> <span class="mi">4000</span><span class="p">,</span>
    <span class="na">server</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">baseDir</span><span class="p">:</span> <span class="nx">siteRoot</span>
    <span class="p">}</span>
  <span class="p">});</span>

  <span class="nx">gulp</span><span class="p">.</span><span class="nx">watch</span><span class="p">(</span><span class="nx">cssFiles</span><span class="p">,</span> <span class="p">[</span><span class="dl">'</span><span class="s1">css</span><span class="dl">'</span><span class="p">]);</span>
<span class="p">});</span>

<span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="dl">'</span><span class="s1">default</span><span class="dl">'</span><span class="p">,</span> <span class="p">[</span><span class="dl">'</span><span class="s1">css</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">jekyll</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">serve</span><span class="dl">'</span><span class="p">]);</span>
</code></pre></div></div>

:ET